Missing values play an important role in statistics and data analysis. Often, missingvalues must not be ignored, but rather they should be carefully studied to see ifthere's an underlying pattern or cause for their missingness.

| In R, NA is used to represent any value that is 'not available' or 'missing' (in the
| statistical sense). In this lesson, we'll explore missing values further.

...

  |========                                                                       |  10%
| Any operation involving NA generally yields NA as the result. To illustrate, let's
| create a vector c(44, NA, 5, NA) and assign it to a variable x.

> 
> x<- c(44, NA, 5, NA)

| Excellent work!

  |============                                                                   |  15%
| Now, let's multiply x by 3.

> x*3
[1] 132  NA  15  NA

| You are doing so well!

  |================                                                               |  20%
| Notice that the elements of the resulting vector that correspond with the NA values in
| x are also NA.

...

  |====================                                                           |  25%
| To make things a little more interesting, lets create a vector containing 1000 draws
| from a standard normal distribution with y <- rnorm(1000).

> y <- rnorm(1000)

| You're the best!

  |========================                                                       |  30%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| All that hard work is paying off!

  |============================                                                   |  35%
| Finally, let's select 100 elements at random from these 2000 values (combining y and
| z) such that we don't know how many NAs we'll wind up with or what positions they'll
| occupy in our final vector -- my_data <- sample(c(y, z), 100).

> my_data <- sample(c(y, z), 100)

| You got it!

  |================================                                               |  40%
| Let's first ask the question of where our NAs are located in our data. The is.na()
| function tells us whether each element of a vector is NA. Call is.na() on my_data and
| assign the result to my_na.

> my_na<-is.na(my_data)


  |====================================                                           
  Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE
 [15]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
 [29]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE
 [43] FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE
 [57] FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [71] FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE
 [99] FALSE FALSE


  |========================================                                     
Everywhere you see a TRUE, you know the corresponding element of my_data is NA. Likewise, everywhere you see a FALSE, you know the corresponding element of my_data is one of our random draws from the standard normal distribution.

In our previous discussion of logical operators, we introduced the `==` operator as a method of testing for equality between two objects. So, you might think the expression my_data == NA yields the same results as is.na(). Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [29] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [57] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [85] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA


The reason you got a vector of all NAs is that NA is not really a value, but just a placeholder for a quantity that is not available. Therefore the logical expression is incomplete and R has no choice but to return a vector of the same length as my_data that contains all NAs.


  |===================================================                          
The key takeaway is to be cautious when using logical expressions anytime NAs might creep in, since a single NA value can derail the entire thing.

So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE for every NA and FALSE for every numeric value, we can compute the total number of NAs in our data.

The trick is to recognize that underneath the surface, R represents TRUE as the number 1 and FALSE as the number 0. Therefore, if we take the sum of a bunch of TRUEs and FALSEs, we get the total number of TRUEs.

Let's give that a try here. Call the sum() function on my_na to count the total number of TRUEs in my_na, and thus the total number of NAs in my_data. Don't assign the result to a new variable.

> sum(my_na)
[1] 48

 Finally, let's take a look at the data to convince ourselves that everything 'adds up'. Print my_data to the console.

> my_data
  [1]          NA  1.13210445  0.66243931          NA  0.54154843          NA -1.14675121
  [8] -1.00753286  0.24969650          NA -1.16154708          NA          NA  0.11770850
 [15]          NA          NA -1.04982049          NA          NA          NA  0.88020638
 [22] -0.68584331          NA          NA          NA -1.29119736          NA          NA
 [29]          NA          NA          NA          NA          NA          NA -1.33692576
 [36]  1.46505275          NA          NA -1.37684200  0.58372096  0.07644553 -1.20199169
 [43]  1.05107268          NA -2.02673931          NA          NA          NA          NA
 [50] -1.15405034          NA -2.59266586  0.35115808          NA  0.86888035          NA
 [57] -0.93895215  0.86868901          NA          NA -0.27456884          NA -0.70677590
 [64]          NA          NA          NA  0.70942587 -2.07490855          NA -0.70211869
 [71]  2.76841211  1.52498212          NA -0.96800336          NA -1.49478507          NA
 [78]          NA  1.72932381 -0.68250856  0.18767156 -1.28590184  0.89560508 -0.58202534
 [85]  0.58155361          NA -0.55493467          NA -0.24048813  1.39349183  0.21576690
 [92]          NA          NA -0.05359395 -2.50819432 -0.08733332          NA -0.50844162
 [99]  0.44989002 -0.09844408


Now that we've got NAs down pat, let's look at a second type of missing value -- NaN,which stands for 'not a number'. To generate NaN, try dividing (using a forward slash) 0 by 0 now.

> 0/0
[1] NaN


 In R, Inf stands for infinity. What happens if you subtract Inf from Inf?

> Inf-Inf
[1] NaN
