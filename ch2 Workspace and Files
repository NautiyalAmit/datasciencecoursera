In this lesson, you'll learn how to examine your local workspace in R and begin to explore the relationship between your workspace and the file system of your machine.

Because different operating systems have different conventions with regards to things like file paths, the outputs of these commands may vary across machines.

However it's important to note that R provides a common API (a common set of commands) for interacting with files, that way your code will work across different kinds of computers.

Determine which directory your R session is using as its current working directory using: getwd().
> getwd()

List all the objects in your local workspace using ls().
> ls()

List all the files in your working directory using list.files() or dir().
> list.files() 
> dir()

Check out the help page for list.files with the command ?list.files.

Using the args() function on a function name is also a handy way to see what arguments a function can take.

Type args(list.files) to see the arguments to list.files.

> args(list.files)
function (path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, 
    recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, 
    no.. = FALSE) 
NULL


Assign the value of the current working directory to a variable called "old.dir".

> old.dir<-getwd()

Use dir.create() to create a directory in the current working directory called "testdir".
Type dir.create("testdir") to create a directory in the current working directory called "testdir".
> dir.create("testdir")

Set your working directory to "testdir" with the setwd() command.
> setwd("testdir")

Create a file in your working directory called "mytest.R" using the file.create() function.
> file.create("mytest.R")
[1] TRUE


This should be the only file in this newly created directory. Let's check this by listing all the files in the current directory.

> list.files()
[1] "mytest.r"


Check to see if "mytest.R" exists in the working directory using the file.exists() function.
> file.exists("mytest.R")
[1] TRUE

These sorts of functions are excessive for interactive use. But, if you are running a program that loops through a series of files and does some processing on each one, you will want to check to see that each exists before you try to process it.
Access information about the file "mytest.R" by using file.info().

> file.info("mytest.R")
         size isdir mode               mtime               ctime               atime uid
mytest.R    0 FALSE  644 2018-09-25 12:15:33 2018-09-25 12:15:33 2018-09-25 12:17:04 501
         gid      uname grname
mytest.R  20 anautiyal3  staff

You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab specific items.

Change the name of the file "mytest.R" to "mytest2.R" by using file.rename().
> file.rename("mytest.R","mytest2.R")
[1] TRUE

Your operating system will provide simpler tools for these sorts of tasks, but having the ability to manipulate files programatically is useful. You might now try to delete mytest.R using 
> file.remove('mytest.R'), 
but that won't work since mytest.R no longer exists. You have already renamed it.

Make a copy of "mytest2.R" called "mytest3.R" using file.copy().

> file.copy("mytest2.R","mytest3.R")
[1] TRUE

You now have two files in the current directory. That may not seem very interesting. But what if you were working with dozens, or millions, of individual files? In that case, being able to programatically act on many files would be absolutely necessary.

Provide the relative path to the file "mytest3.R" by using file.path()
> file.path("mytest3.R")
[1] "mytest3.R"

You can use file.path to construct file and directory paths that are independent of the operating system your R code is running on. Pass 'folder1' and 'folder2' as  arguments to file.path to make a platform-independent pathname.

> file.path('folder1','folder2')
[1] "folder1/folder2"

Take a look at the documentation for dir.create by entering ?dir.create . Notice the'recursive' argument. In order to create nested directories, 'recursive' must be set to TRUE.

Create a directory in the current working directory called "testdir2" and a subdirectory for it called "testdir3", all in one command by using dir.create() and file.path().
> dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)


Go back to your original working directory using setwd()
> setwd(old.dir)
